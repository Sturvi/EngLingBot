package com.example.englingbot.service.message;

import com.example.englingbot.model.UserVocabulary;
import com.example.englingbot.model.enums.UserWordState;
import com.example.englingbot.service.keyboards.InlineKeyboardMarkupFactory;
import com.example.englingbot.service.voice.WordSpeaker;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.Arrays;
import java.util.Optional;

/**
 * A class responsible for sending template messages to users.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class TemplateMessagesSender {
    private final TelegramMessageService telegramMessageService;
    private final WordSpeaker wordSpeaker;
    private final InlineKeyboardMarkupFactory inlineKeyboardMarkupFactory;

    /**
     * Sends a start and help message to the specified chat.
     * @param chatId The ID of the chat to send the message to.
     */
    public void sendStartAndHelpMessage(Long chatId) {
        log.debug("Sending start and help message to chat ID {}", chatId);
        String startAndHelpMessage = """
                –ü—Ä–∏–≤–µ—Ç! –Ø - Word Learning Bot, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

                –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑ –º–µ–Ω—é:

                /start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                /answer - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ —è–∑—ã–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.
                /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
                /statistic - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.
                /delete - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.

                –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞:

                üìí –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.
                üë®üèª‚Äçüéì –£—á–∏—Ç—å —Å–ª–æ–≤–∞ - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
                üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ - –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
                üîÄ –°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º - —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
                üìì –°–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏–∑—É—á–∞–µ—Ç–µ.
                üìì –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–≤—Ç–æ—Ä—è–µ—Ç–µ.
                üìñ –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.
                –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!

                –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @SturviBots
                """;
        telegramMessageService.sendMessageToUser(chatId, startAndHelpMessage);
    }

    /**
     * Sends an "Add Word" message to the specified chat.
     * @param chatId The ID of the chat to send the message to.
     */
    public void sendAddWordMessage(Long chatId) {
        log.debug("Sending add word message to chat ID {}", chatId);
        String message = """
                –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.

                –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏.

                –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–∫–∂–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è

                –£—á—Ç–∏—Ç–µ, —á—Ç–æ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –Ω–∏–∫–∞–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ—ç—Ç–æ–º—É –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –æ—à–∏–±–∫–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –æ—à–∏–±–æ—á–Ω—ã–π.""";
        telegramMessageService.sendMessageToUser(chatId, message);
    }

    /**
     * Sends a message indicating that there are no words to send for the specified user word state(s).
     * @param chatId The ID of the chat to send the message to.
     * @param types The types of word states.
     */
    public void sendNoWordToSendMessage(Long chatId, UserWordState... types) {
        log.debug("Sending no word to send message to chat ID {}, types {}", chatId, types);
        if (types.length == 1) {
            if (types[0] == UserWordState.LEARNING) {
                telegramMessageService.sendMessageToUser(
                        chatId,
                        "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " +
                                "–¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –±–∞–Ω–∫–æ–º —Å–ª–æ–≤.");
            } else if (types[0] == UserWordState.REPETITION) {
                telegramMessageService.sendMessageToUser(
                        chatId,
                        "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " +
                                "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é \"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDF93 –£—á–∏—Ç—å —Å–ª–æ–≤–∞\"");
            }
        } else if (types.length == 2
                && Arrays.asList(types).contains(UserWordState.LEARNING)
                && Arrays.asList(types).contains(UserWordState.REPETITION)) {
            telegramMessageService.sendMessageToUser(
                    chatId,
                    "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " +
                            "–¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –±–∞–Ω–∫–æ–º —Å–ª–æ–≤.");
        }
    }

    /**
     * Sends an error message to the specified chat.
     * @param chatId The ID of the chat to send the message to.
     */
    public void sendErrorMessage(Long chatId) {
        log.error("Sending error message to chat ID {}", chatId);
        telegramMessageService.sendMessageToUser(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!");
    }

    public void sendAudioWithWord(Long chatId, UserVocabulary userWord, String messageText) {
        log.trace("Entering sendAudioWithWord method");

        Optional<File> audio = wordSpeaker.getVoice(userWord.getWord());

        if (audio.isPresent()) {
            log.debug("Audio file found for word: {}", userWord.getWord());
            telegramMessageService.sendAudio(chatId, "–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞", audio.get());
        } else {
            log.warn("Audio file not found for word: {}", userWord.getWord());
        }

        var keyboard = inlineKeyboardMarkupFactory.getKeyboardForCurrentWordInUserWordList(userWord, userWord.getWord().getId().toString());

        telegramMessageService.sendMessageWithKeyboard(chatId, messageText, keyboard);

        log.trace("Exiting sendAudioWithWord method");

    }
}
